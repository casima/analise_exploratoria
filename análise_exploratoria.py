# -*- coding: utf-8 -*-
"""Análise_Exploratoria.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J9LQxEMHmEt8L0RVSaK3bsxgsB4P2qD5
"""

#importando as bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use("seaborn")

#upload do arquivo
from google.colab import files
arq = files.upload()

#criando DataFrame
df = pd.read_excel("AdventureWorks.xlsx")

#verificando os tipos de dados
df.dtypes

#Algumas linhas de dados
df.head(1)

#qtd de linhas e colunas da base de dados
df.shape

#Qual a receita total?
df["Valor Venda"].sum()

#Qual foi custo total?
df["Custo"]=df["Custo Unitário"].mul(df["Quantidade"]) #Cria coluna custo total produto

df["Custo"].head()

#Custo total com duas casas decimais
round(df["Custo"].sum(),2)

#Criando coluna de Lucro
df["Lucro"] = df["Valor Venda"] -  df["Custo"]

df.head(1)

round(df["Lucro"].sum(),2)

#Extraindo tempo que levou para enviar um produto
df["Tempo_Envio"] = (df["Data Envio"] - df["Data Venda"])

df.head(1)

#Extraindo tempo que levou para enviar um produto somente o número
df["Tempo_Envio"] = (df["Data Envio"] - df["Data Venda"]).dt.days

df.head(1)

#Verifica o tipo de dados da coluna
df["Tempo_Envio"].dtype

#Média do tempo de envio por marca, com duas casas decimais
round(df.groupby("Marca")["Tempo_Envio"].mean(), 2)

#vericando dados faltantes (nulos)
df.isnull().sum()

#Agrupando Lucro por ano e por marca
df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum()

#Salvando em uma variável
Lucro_Ano = df.groupby([df["Data Venda"].dt.year, "Marca"])["Lucro"].sum().reset_index()
Lucro_Ano

#reseta display
pd.reset_option('^display.', silent=True)

df.dtypes

df.shape

#Formata saída display em ponto flutuante com duas casas decimais
pd.options.display.float_format = '{:,.2f}'.format

#Qual o total de produtos vendidos?
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=True) #Ordenando de forma crescente

#Gráfico total de produtos vendidos
df.groupby("Produto")["Quantidade"].sum().sort_values(ascending=True).plot.barh(title="Quantidade de produtos vedidos")
plt.xlabel("Total")
plt.ylabel("Produtos");

#Gráfico Lucro por Ano
df.groupby(df["Data Venda"].dt.year)["Lucro"].sum().sort_values(ascending=True).plot.bar(title="Lucro x Ano")
plt.xlabel("Ano")
plt.ylabel("Lucro");

#Lucro
df.groupby(df["Data Venda"].dt.year)["Lucro"].sum().reset_index()

#Filtro Lucro 2009
df_2009 = df[df["Data Venda"].dt.year==2009]

df_2009.head()

#Gráfico Lucro por mês, no Ano 2009
df_2009.groupby(df_2009["Data Venda"].dt.month)["Lucro"].sum().plot(title="Lucro x Mês")
plt.xlabel("Mês")
plt.ylabel("Lucro");

#Gráfico Lucro por marca em 2009
df_2009.groupby("Marca")["Lucro"].sum().plot.bar(title="Lucro por Marca")
plt.xlabel("Marca")
plt.ylabel("Lucro")
plt.xticks(rotation="horizontal"); #label na horizontal

#Gráfico Lucro por classe em 2009
df_2009.groupby("Classe")["Lucro"].sum().plot.bar(title="Lucro por Classe")
plt.xlabel("Classe")
plt.ylabel("Lucro")
plt.xticks(rotation="horizontal"); #label na horizontal

#Análise estatística
df["Tempo_Envio"].describe()

#Gráfico de BoxPlot
plt.boxplot(df["Tempo_Envio"]);

#Histograma
plt.hist(df["Tempo_Envio"]);

#Tempo mínimo de envio
df["Tempo_Envio"].min()

#Tempo máximo de envio
df["Tempo_Envio"].max()

#Identificando o Outlier
df[df["Tempo_Envio"]==20]

